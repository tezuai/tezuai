
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { ScrollArea } from "@/components/ui/scroll-area";
import { 
  FileText, 
  Download, 
  Eye, 
  Sparkles,
  Mail,
  Briefcase,
  GraduationCap,
  Heart
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface DocumentGeneratorProps {
  isEnabled: boolean;
}

export function DocumentGenerator({ isEnabled }: DocumentGeneratorProps) {
  const [selectedTemplate, setSelectedTemplate] = useState("business-letter");
  const [formData, setFormData] = useState({
    title: "",
    recipient: "",
    content: "",
    signature: "Tezu AI User"
  });
  const [generatedDoc, setGeneratedDoc] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const { toast } = useToast();

  const documentTemplates = [
    {
      id: "business-letter",
      name: "Business Letter",
      icon: Briefcase,
      description: "Professional business correspondence"
    },
    {
      id: "email",
      name: "Professional Email",
      icon: Mail,
      description: "Formal email templates"
    },
    {
      id: "resume",
      name: "Resume/CV",
      icon: GraduationCap,
      description: "Professional resume format"
    },
    {
      id: "proposal",
      name: "Project Proposal",
      icon: FileText,
      description: "Business proposal document"
    },
    {
      id: "invitation",
      name: "Invitation Letter",
      icon: Heart,
      description: "Event invitation templates"
    }
  ];

  const generateDocument = async () => {
    if (!isEnabled) {
      toast({
        title: "Premium Feature 🔒",
        description: "Document generator requires authentication. Please login first!",
        variant: "destructive"
      });
      return;
    }

    setIsGenerating(true);

    // Simulate document generation
    setTimeout(() => {
      let template = "";
      const currentDate = new Date().toLocaleDateString('en-IN');

      switch(selectedTemplate) {
        case "business-letter":
          template = `
डेट: ${currentDate}

प्रिय ${formData.recipient || "Sir/Madam"},

विषय: ${formData.title || "Business Communication"}

${formData.content || "यह एक professional business letter है जो Tezu AI द्वारा generate किया गया है। आपके business requirements के अनुसार यह content customize हो सकता है।"}

आपका सहयोग के लिए धन्यवाद।

सादर,
${formData.signature}

---
Generated by Tezu AI Professional Document Generator
          `;
          break;
        case "email":
          template = `
Subject: ${formData.title || "Professional Communication"}

Dear ${formData.recipient || "Team"},

${formData.content || "मुझे आशा है कि आप सभी स्वस्थ और खुश हैं। यह email Tezu AI के professional email generator से बनाया गया है।"}

Best regards,
${formData.signature}

---
Sent via Tezu AI Professional Email Generator
          `;
          break;
        default:
          template = `${formData.title}\n\n${formData.content}\n\n${formData.signature}`;
      }

      setGeneratedDoc(template);
      setIsGenerating(false);
      
      toast({
        title: "Document Generated! 📄",
        description: "Your professional document is ready",
      });
    }, 2000);
  };

  const downloadDocument = () => {
    const blob = new Blob([generatedDoc], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${selectedTemplate}-${Date.now()}.txt`;
    a.click();
    URL.revokeObjectURL(url);
    
    toast({
      title: "Document Downloaded! 💾",
      description: "Document saved successfully",
    });
  };

  if (!isEnabled) {
    return (
      <div className="text-center text-gray-400 p-8">
        <FileText className="w-16 h-16 mx-auto mb-4 opacity-50" />
        <h3 className="text-lg font-semibold mb-2">Document Generator</h3>
        <p className="text-sm">Login to access professional document templates</p>
        <Badge className="mt-2 bg-purple-500/20 text-purple-400">Premium Feature</Badge>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="text-center">
        <h3 className="text-lg font-bold text-white mb-2">📄 Document Generator</h3>
        <p className="text-sm text-gray-400">Create professional documents instantly</p>
      </div>

      <Card className="bg-gray-800/50 border-gray-700">
        <CardHeader>
          <CardTitle className="text-white flex items-center gap-2">
            <FileText className="w-5 h-5" />
            Template Selection
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div>
            <Label className="text-white">Document Type</Label>
            <Select value={selectedTemplate} onValueChange={setSelectedTemplate}>
              <SelectTrigger className="bg-gray-700 border-gray-600 text-white">
                <SelectValue />
              </SelectTrigger>
              <SelectContent className="bg-gray-700 border-gray-600">
                {documentTemplates.map((template) => (
                  <SelectItem key={template.id} value={template.id}>
                    <div className="flex items-center gap-2">
                      <template.icon className="w-4 h-4" />
                      <div>
                        <div className="font-medium">{template.name}</div>
                        <div className="text-xs text-gray-400">{template.description}</div>
                      </div>
                    </div>
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div>
            <Label className="text-white">Title/Subject</Label>
            <Input
              value={formData.title}
              onChange={(e) => setFormData({...formData, title: e.target.value})}
              placeholder="Document title"
              className="bg-gray-700 border-gray-600 text-white"
            />
          </div>

          <div>
            <Label className="text-white">Recipient</Label>
            <Input
              value={formData.recipient}
              onChange={(e) => setFormData({...formData, recipient: e.target.value})}
              placeholder="Recipient name"
              className="bg-gray-700 border-gray-600 text-white"
            />
          </div>

          <div>
            <Label className="text-white">Content</Label>
            <Textarea
              value={formData.content}
              onChange={(e) => setFormData({...formData, content: e.target.value})}
              placeholder="Main content of the document"
              className="bg-gray-700 border-gray-600 text-white"
              rows={4}
            />
          </div>

          <div>
            <Label className="text-white">Signature</Label>
            <Input
              value={formData.signature}
              onChange={(e) => setFormData({...formData, signature: e.target.value})}
              placeholder="Your name"
              className="bg-gray-700 border-gray-600 text-white"
            />
          </div>

          <Button
            onClick={generateDocument}
            disabled={isGenerating}
            className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white"
          >
            {isGenerating ? (
              <Sparkles className="w-4 h-4 mr-2 animate-pulse" />
            ) : (
              <Sparkles className="w-4 h-4 mr-2" />
            )}
            {isGenerating ? "Generating..." : "Generate Document"}
          </Button>
        </CardContent>
      </Card>

      {generatedDoc && (
        <Card className="bg-gray-800/50 border-gray-700">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-white flex items-center gap-2">
                <Eye className="w-5 h-5" />
                Generated Document
              </CardTitle>
              <Button
                onClick={downloadDocument}
                variant="outline"
                size="sm"
                className="border-gray-600"
              >
                <Download className="w-4 h-4 mr-2" />
                Download
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <ScrollArea className="h-64">
              <pre className="text-sm text-gray-100 bg-gray-900/50 p-4 rounded whitespace-pre-wrap">
                {generatedDoc}
              </pre>
            </ScrollArea>
          </CardContent>
        </Card>
      )}
    </div>
  );
}
