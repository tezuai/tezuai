import { useState, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Separator } from "@/components/ui/separator";
import { 
  Newspaper, 
  Clock, 
  CheckCircle, 
  AlertTriangle, 
  Globe, 
  Search,
  Filter,
  Bookmark,
  Share2,
  Volume2,
  VolumeX
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface NewsItem {
  id: string;
  title: string;
  content: string;
  source: string;
  sourceUrl: string;
  timestamp: string;
  category: string;
  verified: boolean;
  credibilityScore: number;
  language: 'hi' | 'en';
  imageUrl?: string;
  tags: string[];
}

const VERIFIED_SOURCES = {
  'ANI': { credibility: 95, type: 'National Agency' },
  'PTI': { credibility: 95, type: 'Press Trust' },
  'Times of India': { credibility: 90, type: 'Print Media' },
  'NDTV': { credibility: 88, type: 'Television' },
  'BBC Hindi': { credibility: 92, type: 'International' },
  'Aaj Tak': { credibility: 85, type: 'Television' },
  'The Hindu': { credibility: 93, type: 'Print Media' },
  'Indian Express': { credibility: 90, type: 'Print Media' }
};

// Real news categories for better organization
const NEWS_CATEGORIES = [
  '‡§∞‡§æ‡§ú‡§®‡•Ä‡§§‡§ø', '‡§ñ‡•á‡§≤', '‡§ü‡•á‡§ï‡•ç‡§®‡•ã‡§≤‡•â‡§ú‡•Ä', '‡§µ‡•ç‡§Ø‡§æ‡§™‡§æ‡§∞', '‡§Æ‡§®‡•ã‡§∞‡§Ç‡§ú‡§®', 
  '‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø', '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ', '‡§µ‡§ø‡§ú‡•ç‡§û‡§æ‡§®', '‡§Ö‡§Ç‡§§‡§∞‡•ç‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø', '‡§∞‡§æ‡§ú‡•ç‡§Ø ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞'
];

export function NewsEngine() {
  const [news, setNews] = useState<NewsItem[]>([]);
  const [filteredNews, setFilteredNews] = useState<NewsItem[]>([]);
  const [selectedCategory, setSelectedCategory] = useState<string>('‡§∏‡§≠‡•Ä');
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date());
  const [savedArticles, setSavedArticles] = useState<string[]>([]);
  const [audioEnabled, setAudioEnabled] = useState(false);
  const { toast } = useToast();

  // Initialize with curated verified news sources
  useEffect(() => {
    loadVerifiedNews();
    
    // Auto-refresh every 5 minutes
    const interval = setInterval(() => {
      refreshNews();
    }, 5 * 60 * 1000);
    
    return () => clearInterval(interval);
  }, []);

  // Filter news based on search and category
  useEffect(() => {
    let filtered = news;
    
    if (selectedCategory !== '‡§∏‡§≠‡•Ä') {
      filtered = filtered.filter(item => item.category === selectedCategory);
    }
    
    if (searchQuery) {
      filtered = filtered.filter(item => 
        item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.content.toLowerCase().includes(searchQuery.toLowerCase()) ||
        item.tags.some(tag => tag.toLowerCase().includes(searchQuery.toLowerCase()))
      );
    }
    
    // Sort by credibility score and timestamp
    filtered.sort((a, b) => {
      if (a.credibilityScore !== b.credibilityScore) {
        return b.credibilityScore - a.credibilityScore;
      }
      return new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime();
    });
    
    setFilteredNews(filtered);
  }, [news, selectedCategory, searchQuery]);

  const loadVerifiedNews = async () => {
    setIsLoading(true);
    try {
      // Simulate real news loading with verified sources
      const verifiedNews: NewsItem[] = [
        {
          id: '1',
          title: '‡§≠‡§æ‡§∞‡§§ ‡§Æ‡•á‡§Ç AI ‡§§‡§ï‡§®‡•Ä‡§ï ‡§ï‡§æ ‡§§‡•á‡§ú‡§º ‡§µ‡§ø‡§ï‡§æ‡§∏: ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ ‡§Æ‡§ø‡§∂‡§® ‡§ï‡•Ä ‡§®‡§à ‡§â‡§™‡§≤‡§¨‡•ç‡§ß‡§ø',
          content: '‡§∏‡§∞‡§ï‡§æ‡§∞ ‡§®‡•á ‡§ò‡•ã‡§∑‡§£‡§æ ‡§ï‡•Ä ‡§π‡•à ‡§ï‡§ø ‡§¶‡•á‡§∂ ‡§Æ‡•á‡§Ç ‡§ï‡•É‡§§‡•ç‡§∞‡§ø‡§Æ ‡§¨‡•Å‡§¶‡•ç‡§ß‡§ø‡§Æ‡§§‡•ç‡§§‡§æ (AI) ‡§ï‡•á ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§™‡•ç‡§∞‡§ó‡§§‡§ø ‡§π‡•Å‡§à ‡§π‡•à‡•§ ‡§®‡§à ‡§®‡•Ä‡§§‡§ø ‡§ï‡•á ‡§§‡§π‡§§ AI ‡§á‡§®‡•ã‡§µ‡•á‡§∂‡§® ‡§ï‡•ã ‡§¨‡§¢‡§º‡§æ‡§µ‡§æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ‡•§',
          source: 'PTI',
          sourceUrl: 'https://pti.in',
          timestamp: new Date().toISOString(),
          category: '‡§ü‡•á‡§ï‡•ç‡§®‡•ã‡§≤‡•â‡§ú‡•Ä',
          verified: true,
          credibilityScore: 95,
          language: 'hi',
          imageUrl: 'https://images.unsplash.com/photo-1677442136019-21780ecad995?w=400',
          tags: ['AI', 'Technology', 'Digital India', 'Innovation']
        },
        {
          id: '2',
          title: 'Sports Update: ‡§≠‡§æ‡§∞‡§§‡•Ä‡§Ø ‡§ï‡•ç‡§∞‡§ø‡§ï‡•á‡§ü ‡§ü‡•Ä‡§Æ ‡§ï‡•Ä ‡§∂‡§æ‡§®‡§¶‡§æ‡§∞ ‡§ú‡•Ä‡§§',
          content: '‡§ü‡•Ä‡§Æ ‡§á‡§Ç‡§°‡§ø‡§Ø‡§æ ‡§®‡•á ‡§Ö‡§Ç‡§§‡§∞‡•ç‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Ø ‡§Æ‡•à‡§ö ‡§Æ‡•á‡§Ç ‡§™‡•ç‡§∞‡§≠‡§æ‡§µ‡§∂‡§æ‡§≤‡•Ä ‡§™‡•ç‡§∞‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•Ä‡§§ ‡§π‡§æ‡§∏‡§ø‡§≤ ‡§ï‡•Ä‡•§ ‡§ï‡§™‡•ç‡§§‡§æ‡§® ‡§î‡§∞ ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡§ø‡§Ø‡•ã‡§Ç ‡§®‡•á ‡§â‡§§‡•ç‡§ï‡•É‡§∑‡•ç‡§ü ‡§ñ‡•á‡§≤ ‡§¶‡§ø‡§ñ‡§æ‡§Ø‡§æ‡•§',
          source: 'ANI',
          sourceUrl: 'https://ani.in',
          timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),
          category: '‡§ñ‡•á‡§≤',
          verified: true,
          credibilityScore: 95,
          language: 'hi',
          imageUrl: 'https://images.unsplash.com/photo-1540747913346-19e32dc3e97e?w=400',
          tags: ['Cricket', 'Sports', 'Team India', 'Victory']
        },
        {
          id: '3',
          title: 'Education Reform: ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ ‡§Æ‡•á‡§Ç ‡§®‡§à ‡§®‡•Ä‡§§‡§ø ‡§ï‡§æ ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§®‡•ç‡§µ‡§Ø‡§®',
          content: '‡§®‡§à ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§®‡•Ä‡§§‡§ø ‡§ï‡•á ‡§§‡§π‡§§ ‡§∏‡•ç‡§ï‡•Ç‡§≤‡•ã‡§Ç ‡§î‡§∞ ‡§ï‡•â‡§≤‡•á‡§ú‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§ß‡•Å‡§®‡§ø‡§ï ‡§™‡§æ‡§†‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ ‡§≤‡§æ‡§ó‡•Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∞‡§π‡§æ ‡§π‡•à‡•§ ‡§õ‡§æ‡§§‡•ç‡§∞‡•ã‡§Ç ‡§ï‡•ã ‡§¨‡•á‡§π‡§§‡§∞ ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ ‡§Æ‡§ø‡§≤‡§®‡•á ‡§ï‡•Ä ‡§â‡§Æ‡•ç‡§Æ‡•Ä‡§¶‡•§',
          source: 'The Hindu',
          sourceUrl: 'https://thehindu.com',
          timestamp: new Date(Date.now() - 60 * 60 * 1000).toISOString(),
          category: '‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ',
          verified: true,
          credibilityScore: 93,
          language: 'hi',
          tags: ['Education', 'Policy', 'Reform', 'Students']
        }
      ];
      
      setNews(verifiedNews);
      setLastUpdated(new Date());
      
      toast({
        title: "‚úÖ News Updated",
        description: `${verifiedNews.length} ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§≤‡•ã‡§° ‡§ï‡§ø‡§è ‡§ó‡§è`,
      });
    } catch (error) {
      toast({
        title: "‚ùå Error Loading News",
        description: "‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à, ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  const refreshNews = async () => {
    setIsRefreshing(true);
    await loadVerifiedNews();
    setIsRefreshing(false);
  };

  const toggleSaveArticle = (articleId: string) => {
    setSavedArticles(prev => 
      prev.includes(articleId) 
        ? prev.filter(id => id !== articleId)
        : [...prev, articleId]
    );
  };

  const shareArticle = (article: NewsItem) => {
    if (navigator.share) {
      navigator.share({
        title: article.title,
        text: article.content.substring(0, 100) + '...',
        url: article.sourceUrl
      });
    } else {
      navigator.clipboard.writeText(`${article.title}\n${article.sourceUrl}`);
      toast({
        title: "üìã Copied to Clipboard",
        description: "Article link copied successfully"
      });
    }
  };

  const readArticleAloud = (article: NewsItem) => {
    if (audioEnabled && 'speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(article.title + '. ' + article.content);
      utterance.lang = article.language === 'hi' ? 'hi-IN' : 'en-US';
      speechSynthesis.speak(utterance);
    }
  };

  const getCredibilityBadge = (score: number) => {
    if (score >= 90) return <Badge className="bg-green-600 text-white">‡§Ö‡§§‡•ç‡§Ø‡§ß‡§ø‡§ï ‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø</Badge>;
    if (score >= 80) return <Badge className="bg-blue-600 text-white">‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø</Badge>;
    if (score >= 70) return <Badge className="bg-yellow-600 text-black">‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø</Badge>;
    return <Badge className="bg-red-600 text-white">‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§® ‡§Ü‡§µ‡§∂‡•ç‡§Ø‡§ï</Badge>;
  };

  return (
    <div className="space-y-6 p-6 bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-blue-900 min-h-screen">
      {/* Header */}
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div className="flex items-center gap-3">
          <Newspaper className="w-8 h-8 text-blue-600" />
          <div>
            <h1 className="text-3xl font-bold text-slate-800 dark:text-white">‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§ ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞</h1>
            <p className="text-slate-600 dark:text-slate-300">‡§µ‡§ø‡§∂‡•ç‡§µ‡§∏‡§®‡•Ä‡§Ø ‡§∏‡•ç‡§∞‡•ã‡§§‡•ã‡§Ç ‡§∏‡•á ‡§µ‡§æ‡§∏‡•ç‡§§‡§µ‡§ø‡§ï ‡§∏‡§Æ‡§Ø ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button 
            onClick={refreshNews} 
            disabled={isRefreshing}
            variant="outline"
            size="sm"
          >
            {isRefreshing ? "Refreshing..." : "Refresh"}
          </Button>
          
          <Button 
            onClick={() => setAudioEnabled(!audioEnabled)}
            variant={audioEnabled ? "default" : "outline"}
            size="sm"
          >
            {audioEnabled ? <Volume2 className="w-4 h-4" /> : <VolumeX className="w-4 h-4" />}
          </Button>
        </div>
      </div>

      {/* Last Updated */}
      <div className="flex items-center gap-2 text-sm text-slate-600 dark:text-slate-400">
        <Clock className="w-4 h-4" />
        <span>‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü: {lastUpdated.toLocaleString('hi-IN')}</span>
      </div>

      {/* Search and Filter */}
      <div className="flex flex-col md:flex-row gap-4">
        <div className="flex-1">
          <div className="relative">
            <Search className="w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" />
            <Input
              placeholder="‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10"
            />
          </div>
        </div>
        
        <div className="flex flex-wrap gap-2">
          <Button
            variant={selectedCategory === '‡§∏‡§≠‡•Ä' ? "default" : "outline"}
            size="sm"
            onClick={() => setSelectedCategory('‡§∏‡§≠‡•Ä')}
          >
            ‡§∏‡§≠‡•Ä
          </Button>
          {NEWS_CATEGORIES.map(category => (
            <Button
              key={category}
              variant={selectedCategory === category ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedCategory(category)}
            >
              {category}
            </Button>
          ))}
        </div>
      </div>

      {/* News List */}
      <ScrollArea className="h-[600px]">
        <div className="space-y-4">
          {isLoading ? (
            <div className="text-center py-8">
              <div className="animate-spin w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
              <p className="text-slate-600 dark:text-slate-400">‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•á ‡§π‡•à‡§Ç...</p>
            </div>
          ) : filteredNews.length === 0 ? (
            <div className="text-center py-8">
              <Newspaper className="w-12 h-12 text-slate-400 mx-auto mb-4" />
              <p className="text-slate-600 dark:text-slate-400">‡§ï‡•ã‡§à ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡§æ</p>
            </div>
          ) : (
            filteredNews.map((article) => (
              <Card key={article.id} className="hover:shadow-lg transition-shadow border-l-4 border-l-blue-600">
                <CardHeader className="pb-3">
                  <div className="flex justify-between items-start gap-4">
                    <div className="flex-1">
                      <CardTitle className="text-xl mb-2 line-clamp-2 text-slate-800 dark:text-white">
                        {article.title}
                      </CardTitle>
                      
                      <div className="flex flex-wrap items-center gap-2 mb-2">
                        {article.verified && (
                          <Badge className="bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200">
                            <CheckCircle className="w-3 h-3 mr-1" />
                            ‡§∏‡§§‡•ç‡§Ø‡§æ‡§™‡§ø‡§§
                          </Badge>
                        )}
                        {getCredibilityBadge(article.credibilityScore)}
                        <Badge variant="outline">{article.category}</Badge>
                        <Badge variant="outline">{article.source}</Badge>
                      </div>
                    </div>
                    
                    {article.imageUrl && (
                      <img 
                        src={article.imageUrl} 
                        alt={article.title}
                        className="w-24 h-24 object-cover rounded-lg"
                      />
                    )}
                  </div>
                </CardHeader>
                
                <CardContent>
                  <p className="text-slate-600 dark:text-slate-300 mb-4 line-clamp-3">
                    {article.content}
                  </p>
                  
                  <div className="flex flex-wrap items-center justify-between gap-4">
                    <div className="flex items-center gap-2 text-sm text-slate-500 dark:text-slate-400">
                      <Clock className="w-4 h-4" />
                      <span>{new Date(article.timestamp).toLocaleString('hi-IN')}</span>
                      <Globe className="w-4 h-4 ml-2" />
                      <span>{article.language === 'hi' ? '‡§π‡§ø‡§Ç‡§¶‡•Ä' : 'English'}</span>
                    </div>
                    
                    <div className="flex items-center gap-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => toggleSaveArticle(article.id)}
                      >
                        <Bookmark 
                          className={`w-4 h-4 ${savedArticles.includes(article.id) ? 'fill-current' : ''}`} 
                        />
                      </Button>
                      
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => shareArticle(article)}
                      >
                        <Share2 className="w-4 h-4" />
                      </Button>
                      
                      {audioEnabled && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => readArticleAloud(article)}
                        >
                          <Volume2 className="w-4 h-4" />
                        </Button>
                      )}
                    </div>
                  </div>
                  
                  {/* Tags */}
                  {article.tags.length > 0 && (
                    <>
                      <Separator className="my-3" />
                      <div className="flex flex-wrap gap-1">
                        {article.tags.map(tag => (
                          <Badge key={tag} variant="secondary" className="text-xs">
                            #{tag}
                          </Badge>
                        ))}
                      </div>
                    </>
                  )}
                </CardContent>
              </Card>
            ))
          )}
        </div>
      </ScrollArea>

      {/* Footer Stats */}
      <div className="bg-white dark:bg-slate-800 rounded-lg p-4 shadow">
        <div className="flex justify-between items-center text-sm">
          <span className="text-slate-600 dark:text-slate-400">
            ‡§ï‡•Å‡§≤ ‡§∏‡§Æ‡§æ‡§ö‡§æ‡§∞: {news.length} | ‡§´‡§º‡§ø‡§≤‡•ç‡§ü‡§∞ ‡§ï‡§ø‡§è ‡§ó‡§è: {filteredNews.length}
          </span>
          <span className="text-slate-600 dark:text-slate-400">
            ‡§∏‡§π‡•á‡§ú‡•á ‡§ó‡§è: {savedArticles.length}
          </span>
        </div>
      </div>
    </div>
  );
}